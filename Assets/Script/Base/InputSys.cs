//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputSys.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSys : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSys()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSys"",
    ""maps"": [
        {
            ""name"": ""FirstPersonPlayer"",
            ""id"": ""7693aa95-0dad-4712-a784-5ff6114237db"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""99bbdf1b-fad0-4ea7-9310-eaa6645e12ef"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""838ccdbe-16b1-4960-b4db-ff6a484d4861"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Move"",
                    ""id"": ""de6aaeb1-8ba6-45ec-bb5e-7182a2429158"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""ba853eb2-b504-47a7-b89f-e56ddb4a9aff"",
                    ""path"": ""<Keyboard>/#(W)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""569dcc44-609c-4ef8-8d3d-fa57f56509a2"",
                    ""path"": ""<Keyboard>/#(S)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""a50810cb-dec4-4b74-a10c-b89dc7623c9b"",
                    ""path"": ""<Keyboard>/#(A)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""f77b7a21-049d-4e64-9c1d-b35d0afae809"",
                    ""path"": ""<Keyboard>/#(D)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Control Scheme"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Control Scheme"",
            ""bindingGroup"": ""Control Scheme"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // FirstPersonPlayer
        m_FirstPersonPlayer = asset.FindActionMap("FirstPersonPlayer", throwIfNotFound: true);
        m_FirstPersonPlayer_Move = m_FirstPersonPlayer.FindAction("Move", throwIfNotFound: true);
        m_FirstPersonPlayer_Newaction = m_FirstPersonPlayer.FindAction("New action", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // FirstPersonPlayer
    private readonly InputActionMap m_FirstPersonPlayer;
    private IFirstPersonPlayerActions m_FirstPersonPlayerActionsCallbackInterface;
    private readonly InputAction m_FirstPersonPlayer_Move;
    private readonly InputAction m_FirstPersonPlayer_Newaction;
    public struct FirstPersonPlayerActions
    {
        private @InputSys m_Wrapper;
        public FirstPersonPlayerActions(@InputSys wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_FirstPersonPlayer_Move;
        public InputAction @Newaction => m_Wrapper.m_FirstPersonPlayer_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_FirstPersonPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FirstPersonPlayerActions set) { return set.Get(); }
        public void SetCallbacks(IFirstPersonPlayerActions instance)
        {
            if (m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface.OnMove;
                @Newaction.started -= m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_FirstPersonPlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public FirstPersonPlayerActions @FirstPersonPlayer => new FirstPersonPlayerActions(this);
    private int m_ControlSchemeSchemeIndex = -1;
    public InputControlScheme ControlSchemeScheme
    {
        get
        {
            if (m_ControlSchemeSchemeIndex == -1) m_ControlSchemeSchemeIndex = asset.FindControlSchemeIndex("Control Scheme");
            return asset.controlSchemes[m_ControlSchemeSchemeIndex];
        }
    }
    public interface IFirstPersonPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnNewaction(InputAction.CallbackContext context);
    }
}
